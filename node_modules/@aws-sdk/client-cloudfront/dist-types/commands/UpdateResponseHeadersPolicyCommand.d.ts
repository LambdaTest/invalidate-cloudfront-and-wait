import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CloudFrontClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CloudFrontClient";
import { UpdateResponseHeadersPolicyRequest, UpdateResponseHeadersPolicyResult } from "../models/models_1";
export interface UpdateResponseHeadersPolicyCommandInput extends UpdateResponseHeadersPolicyRequest {
}
export interface UpdateResponseHeadersPolicyCommandOutput extends UpdateResponseHeadersPolicyResult, __MetadataBearer {
}
/**
 * <p>Updates a response headers policy.</p>
 * 		       <p>When you update a response headers policy, the entire policy is replaced. You cannot
 * 			update some policy fields independent of others. To update a response headers policy
 * 			configuration:</p>
 * 		       <ol>
 *             <li>
 * 				           <p>Use <code>GetResponseHeadersPolicyConfig</code> to get the current policy’s
 * 					configuration.</p>
 * 			         </li>
 *             <li>
 * 				           <p>Modify the fields in the response headers policy configuration that you want
 * 					to update.</p>
 * 			         </li>
 *             <li>
 * 				           <p>Call <code>UpdateResponseHeadersPolicy</code>, providing the entire response
 * 					headers policy configuration, including the fields that you modified and those
 * 					that you didn’t.</p>
 * 			         </li>
 *          </ol>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CloudFrontClient, UpdateResponseHeadersPolicyCommand } from "@aws-sdk/client-cloudfront"; // ES Modules import
 * // const { CloudFrontClient, UpdateResponseHeadersPolicyCommand } = require("@aws-sdk/client-cloudfront"); // CommonJS import
 * const client = new CloudFrontClient(config);
 * const command = new UpdateResponseHeadersPolicyCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link UpdateResponseHeadersPolicyCommandInput} for command's `input` shape.
 * @see {@link UpdateResponseHeadersPolicyCommandOutput} for command's `response` shape.
 * @see {@link CloudFrontClientResolvedConfig | config} for CloudFrontClient's `config` shape.
 *
 */
export declare class UpdateResponseHeadersPolicyCommand extends $Command<UpdateResponseHeadersPolicyCommandInput, UpdateResponseHeadersPolicyCommandOutput, CloudFrontClientResolvedConfig> {
    readonly input: UpdateResponseHeadersPolicyCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: UpdateResponseHeadersPolicyCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudFrontClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateResponseHeadersPolicyCommandInput, UpdateResponseHeadersPolicyCommandOutput>;
    private serialize;
    private deserialize;
}
