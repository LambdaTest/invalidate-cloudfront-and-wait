import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CloudFrontClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CloudFrontClient";
import { CreateKeyGroupRequest, CreateKeyGroupResult } from "../models/models_0";
export interface CreateKeyGroupCommandInput extends CreateKeyGroupRequest {
}
export interface CreateKeyGroupCommandOutput extends CreateKeyGroupResult, __MetadataBearer {
}
/**
 * <p>Creates a key group that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">CloudFront signed URLs and signed cookies</a>.</p>
 * 		       <p>To create a key group, you must specify at least one public key for the key group. After you
 * 			create a key group, you can reference it from one or more cache behaviors. When you
 * 			reference a key group in a cache behavior, CloudFront requires signed URLs or signed cookies
 * 			for all requests that match the cache behavior. The URLs or cookies must be signed with
 * 			a private key whose corresponding public key is in the key group. The signed URL or
 * 			cookie contains information about which public key CloudFront should use to verify the
 * 			signature. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving private content</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CloudFrontClient, CreateKeyGroupCommand } from "@aws-sdk/client-cloudfront"; // ES Modules import
 * // const { CloudFrontClient, CreateKeyGroupCommand } = require("@aws-sdk/client-cloudfront"); // CommonJS import
 * const client = new CloudFrontClient(config);
 * const command = new CreateKeyGroupCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link CreateKeyGroupCommandInput} for command's `input` shape.
 * @see {@link CreateKeyGroupCommandOutput} for command's `response` shape.
 * @see {@link CloudFrontClientResolvedConfig | config} for CloudFrontClient's `config` shape.
 *
 */
export declare class CreateKeyGroupCommand extends $Command<CreateKeyGroupCommandInput, CreateKeyGroupCommandOutput, CloudFrontClientResolvedConfig> {
    readonly input: CreateKeyGroupCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: CreateKeyGroupCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudFrontClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateKeyGroupCommandInput, CreateKeyGroupCommandOutput>;
    private serialize;
    private deserialize;
}
